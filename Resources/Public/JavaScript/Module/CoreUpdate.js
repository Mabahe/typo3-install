/*
 * This file is part of the TYPO3 CMS project.
 *
 * It is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License, either version 2
 * of the License, or any later version.
 *
 * For the full copyright and license information, please read the
 * LICENSE.txt file that was distributed with this source code.
 *
 * The TYPO3 project - inspiring people to share!
 */
define(["require","exports","jquery","../Router","../Renderable/FlashMessage","../Renderable/Severity","TYPO3/CMS/Backend/Notification"],function(e,t,o,a,n,i,s){"use strict";return new(function(){function e(){this.actionQueue={coreUpdateIsUpdateAvailable:{loadingMessage:"Checking for possible regular or security update",finishMessage:void 0,nextActionName:void 0},coreUpdateCheckPreConditions:{loadingMessage:"Checking if update is possible",finishMessage:"System can be updated",nextActionName:"coreUpdateDownload"},coreUpdateDownload:{loadingMessage:"Downloading new core",finishMessage:void 0,nextActionName:"coreUpdateVerifyChecksum"},coreUpdateVerifyChecksum:{loadingMessage:"Verifying checksum of downloaded core",finishMessage:void 0,nextActionName:"coreUpdateUnpack"},coreUpdateUnpack:{loadingMessage:"Unpacking core",finishMessage:void 0,nextActionName:"coreUpdateMove"},coreUpdateMove:{loadingMessage:"Moving core",finishMessage:void 0,nextActionName:"coreUpdateActivate"},coreUpdateActivate:{loadingMessage:"Activating core",finishMessage:"Core updated - please reload your browser",nextActionName:void 0}},this.selectorModalBody=".t3js-modal-body",this.selectorOutput=".t3js-coreUpdate-output",this.selectorTemplate=".t3js-coreUpdate-buttonTemplate",this.buttonTemplate=null,this.currentModal=null}return e.prototype.initialize=function(t){var a=this;this.currentModal=t,this.getData().done(function(){var e=t.find(a.selectorTemplate);a.buttonTemplate=e.children().clone()}),t.on("click",".t3js-coreUpdate-init",function(n){n.preventDefault();var i=o(n.target).attr("data-action");t.find(a.selectorOutput).empty(),e.call(i)})},e.prototype.getData=function(){var e=this.currentModal.find(this.selectorModalBody);return o.ajax({url:a.getUrl("coreUpdateGetData"),cache:!1,success:function(t){!0===t.success?e.empty().append(t.html):s.error("Something went wrong")},error:function(t){a.handleAjaxError(t,e)}})},e.prototype.checkForUpdate=function(){this.callAction("coreUpdateIsUpdateAvailable")},e.prototype.updateDevelopment=function(){this.update("development")},e.prototype.updateRegular=function(){this.update("regular")},e.prototype.update=function(e){"development"!==e&&(e="regular"),this.callAction("coreUpdateCheckPreConditions",e)},e.prototype.callAction=function(e,t){var n=this,i={install:{action:e}};void 0!==t&&(i.install.type=t),this.addLoadingMessage(this.actionQueue[e].loadingMessage),o.ajax({url:a.getUrl(),data:i,cache:!1,success:function(o){!0===n.handleResult(o,n.actionQueue[e].finishMessage)&&void 0!==n.actionQueue[e].nextActionName&&n.callAction(n.actionQueue[e].nextActionName,t)},error:function(e){a.handleAjaxError(e,n.currentModal.find(n.selectorModalBody))}})},e.prototype.handleResult=function(e,t){var o=e.success;return this.removeLoadingMessage(),e.status&&"object"==typeof e.status&&this.showStatusMessages(e.status),e.action&&"object"==typeof e.action&&this.showActionButton(e.action),t&&this.addMessage(i.ok,t),o},e.prototype.addLoadingMessage=function(e){var t=n.render(i.loading,e);this.currentModal.find(this.selectorOutput).append(t)},e.prototype.removeLoadingMessage=function(){this.currentModal.find(this.selectorOutput).find(".alert-loading").remove()},e.prototype.showStatusMessages=function(e){var t=this;o.each(e,function(e,o){var a="",n="",i=o.severity;o.title&&(a=o.title),o.message&&(n=o.message),t.addMessage(i,a,n)})},e.prototype.showActionButton=function(e){var t=!1,o=!1;e.title&&(t=e.title),e.action&&(o=e.action);var a=this.buttonTemplate;o&&a.attr("data-action",o),t&&a.text(t),this.currentModal.find(this.selectorOutput).append(a)},e.prototype.addMessage=function(e,t,o){var a=n.render(e,t,o);this.currentModal.find(this.selectorOutput).append(a)},e}())});